def pop_up_reg_d():    
    close_popup()
    popup3 = "popup PAS_A_PAS : Table droite programmée"#"popup La table droite est programmée. Appuyer sur le bouton gauche ou droite pour commencer le reglage d'une pièce sur la table associée. La gestion des modes programmation, éxécution et reglage se fait à l'aide des commutateurs superieurs."
    socket_open("127.0.0.1",29999,"internal") # open internal socket
    socket_send_line(popup3,"internal")     #Affichage message
    socket_send_byte(10,"internal")
end

def pop_up_reg_g():
    close_popup()
    popup3 = "popup PAS_A_PAS : Table gauche programmée"#"popup La table gauche est programmée. Appuyer sur le bouton gauche ou droite pour commencer mode pas a pas et le reglage d'une pièce sur la table associée. La gestion des modes programmation, éxécution et reglage se fait à l'aide des commutateurs superieurs."
    socket_open("127.0.0.1",29999,"internal") # open internal socket
    socket_send_line(popup3,"internal")     #Affichage message
    socket_send_byte(10,"internal")
end 

def pop_up_reg_gd():
    close_popup()
    popup3 = "popup PAS_A_PAS : Les deux tables sont programmées"#"popup Les deux tables sont programmées. Appuyer sur le bouton gauche ou droite pour commencer le reglage d'une pièce sur la table associée ou passez en mode éxécution à l'aide du commutateur superieur gauche pour effectuer un ou plusieurs cycle(s) de soudure(s)."
    socket_open("127.0.0.1",29999,"internal") # open internal socket
    socket_send_line(popup3,"internal")     #Affichage message
    socket_send_byte(10,"internal")
end 

def pop_up_reg():
    close_popup()
    popup3 = "popup PAS_A_PAS : Aucune table n'est programmée"#"popup Appuyer sur le bouton gauche ou droite pour commencer le reglage d'une pièce sur la table associée. La gestion des modes configuration, éxécution et reglage se fait à l'aide des commutateurs superieurs."
    socket_open("127.0.0.1",29999,"internal") # open internal socket
    socket_send_line(popup3,"internal")     #Affichage message
    socket_send_byte(10,"internal")
end 

def fun_PopUp_PaP(index,type,numPopUP):
    index = index +1 
    char_numeroDeSoudure = to_str(index)
    
    local resultat = False 
    local resultat2  = 0 

    if (type == 1):
		char_soudure = "point"					#si type = 1, la demande sera sur une soudure point 
	elif ((type == 2) or (type ==5)):							
		char_soudure = "lineaire"				#si type = 2, la demande sera sur une soudure linéaire 
	elif (type == 3): 
		char_soudure = "arc de cercle"			#si type = 3, la demande sera sur une soudure arc de cercle 
	elif (type == 4):
		char_soudure = "cercle"					#si type = 4, la demande sera sur une soudure cercle 
    elif (type == 6):
        char_soudure = "recopie"                #si type = 5, la demande sera sur une recopie de mouvement 
	else :
		char_soudure = "erreur de saisie"
	end

    if (numPopUP == 1): 
        resultat  = request_boolean_from_primary_client("Soudure numero : " + char_numeroDeSoudure + ", de type : "+ char_soudure + ". Voulez vous effectuer la soudure ?(securité desactivée) Appuyer sur non pour passer à la soudure suivante. ")
        return resultat
    elif (numPopUP ==2 ):
        resultat = request_boolean_from_primary_client("Voulez vous modifier la soudure numéro :" + char_numeroDeSoudure + " ? Appuyez sur non pour continuer")
        return resultat
    elif (numPopUP ==3 ):
        resultat2 = request_integer_from_primary_client("       1-> Point SUIVANT                     Ajouter :    2-> AVANT      3-> APRES")
        return resultat2
    elif (numPopUP ==4 ):
         esultat = request_boolean_from_primary_client("Voulez vous refaire une simulation? Appuyez sur non pour continuer.")
        return resultat
    end


end 
